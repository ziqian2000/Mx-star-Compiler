func array.size %unnamed_0(0) {
unnamed_0(1):
	%unnamed_1(2) = load %unnamed_0(0)
	ret %unnamed_1(2)
}

func __init {
unnamed_1(3):
	call main
	ret
}

func Array_Node.Array_Node %this(4) {
entry(5):
	%unnamed_2(6) = add %this(4) 4
	%unnamed_3(7) = load %unnamed_2(6)
	store 0 %unnamed_2(6)
	%unnamed_4(8) = add %this(4) 0
	%unnamed_6(9) = mul 100000 8
	%unnamed_7(10) = add %unnamed_6(9) 4
	%unnamed_5(11) = alloc %unnamed_7(10)
	store 100000 %unnamed_5(11)
	%unnamed_8(12) = load %unnamed_4(8)
	store %unnamed_5(11) %unnamed_4(8)
	ret
}

func Array_Node.push_back %this(13) %v(14) {
entry(15):
	%unnamed_9(16) = add %this(13) 0
	%unnamed_10(17) = add %this(13) 4
	%unnamed_11(18) = load %unnamed_10(17)
	%unnamed_12(19) = add %unnamed_11(18) 1
	store %unnamed_12(19) %unnamed_10(17)
	%unnamed_13(20) = load %unnamed_9(16)
	%unnamed_14(21) = add %unnamed_11(18) 1
	%unnamed_15(22) = mul %unnamed_14(21) 8
	%unnamed_16(23) = add %unnamed_13(20) %unnamed_15(22)
	%unnamed_17(24) = load %unnamed_16(23)
	store %v(14) %unnamed_16(23)
	ret
}

func Array_Node.pop_back %this(25) {
entry(26):
	%unnamed_18(27) = add %this(25) 4
	%unnamed_19(28) = load %unnamed_18(27)
	%unnamed_19(28) = sub %unnamed_19(28) 1
	store %unnamed_19(28) %unnamed_18(27)
	%unnamed_20(29) = add %this(25) 0
	%unnamed_21(30) = add %this(25) 4
	%unnamed_22(31) = load %unnamed_20(29)
	%unnamed_23(32) = load %unnamed_21(30)
	%unnamed_24(33) = add %unnamed_23(32) 1
	%unnamed_25(34) = mul %unnamed_24(33) 8
	%unnamed_26(35) = add %unnamed_22(31) %unnamed_25(34)
	%unnamed_27(36) = load %unnamed_26(35)
	ret %unnamed_27(36)
}

func Array_Node.back %this(37) {
entry(38):
	%unnamed_28(39) = add %this(37) 0
	%unnamed_29(40) = add %this(37) 4
	%unnamed_30(41) = load %unnamed_29(40)
	%unnamed_31(42) = sub %unnamed_30(41) 1
	%unnamed_32(43) = load %unnamed_28(39)
	%unnamed_33(44) = add %unnamed_31(42) 1
	%unnamed_34(45) = mul %unnamed_33(44) 8
	%unnamed_35(46) = add %unnamed_32(43) %unnamed_34(45)
	%unnamed_36(47) = load %unnamed_35(46)
	ret %unnamed_36(47)
}

func Array_Node.front %this(48) {
entry(49):
	%unnamed_37(50) = add %this(48) 0
	%unnamed_38(51) = load %unnamed_37(50)
	%unnamed_39(52) = add 0 1
	%unnamed_40(53) = mul %unnamed_39(52) 8
	%unnamed_41(54) = add %unnamed_38(51) %unnamed_40(53)
	%unnamed_42(55) = load %unnamed_41(54)
	ret %unnamed_42(55)
}

func Array_Node.size %this(56) {
entry(57):
	%unnamed_43(58) = add %this(56) 4
	%unnamed_44(59) = load %unnamed_43(58)
	ret %unnamed_44(59)
}

func Array_Node.resize %this(60) %newSize(61) {
entry(62):
	jump unnamed_2(63)
unnamed_2(63):
	%unnamed_45(64) = add %this(60) 0
	%unnamed_47(65) = load %unnamed_45(64)
	%unnamed_46(66) = call array.size %unnamed_47(65)
	%unnamed_48(67) = lt %unnamed_46(66) %newSize(61)
	br %unnamed_48(67) unnamed_3(68) unnamed_4(69)
unnamed_3(68):
	call Array_Node.doubleStorage %this(60)
	jump unnamed_2(63)
unnamed_4(69):
	%unnamed_49(70) = add %this(60) 4
	%unnamed_50(71) = load %unnamed_49(70)
	store %newSize(61) %unnamed_49(70)
	ret
}

func Array_Node.get %this(72) %i(73) {
entry(74):
	%unnamed_51(75) = add %this(72) 0
	%unnamed_52(76) = load %unnamed_51(75)
	%unnamed_53(77) = add %i(73) 1
	%unnamed_54(78) = mul %unnamed_53(77) 8
	%unnamed_55(79) = add %unnamed_52(76) %unnamed_54(78)
	%unnamed_56(80) = load %unnamed_55(79)
	ret %unnamed_56(80)
}

func Array_Node.set %this(81) %i(82) %v(83) {
entry(84):
	%unnamed_57(85) = add %this(81) 0
	%unnamed_58(86) = load %unnamed_57(85)
	%unnamed_59(87) = add %i(82) 1
	%unnamed_60(88) = mul %unnamed_59(87) 8
	%unnamed_61(89) = add %unnamed_58(86) %unnamed_60(88)
	%unnamed_62(90) = load %unnamed_61(89)
	store %v(83) %unnamed_61(89)
	ret
}

func Array_Node.swap %this(91) %i(92) %j(93) {
entry(94):
	%unnamed_63(95) = add %this(91) 0
	%unnamed_64(96) = load %unnamed_63(95)
	%unnamed_65(97) = add %i(92) 1
	%unnamed_66(98) = mul %unnamed_65(97) 8
	%unnamed_67(99) = add %unnamed_64(96) %unnamed_66(98)
	%unnamed_68(100) = load %unnamed_67(99)
	%t(101) = move %unnamed_68(100)
	%unnamed_69(102) = add %this(91) 0
	%unnamed_70(103) = load %unnamed_69(102)
	%unnamed_71(104) = add %i(92) 1
	%unnamed_72(105) = mul %unnamed_71(104) 8
	%unnamed_73(106) = add %unnamed_70(103) %unnamed_72(105)
	%unnamed_74(107) = add %this(91) 0
	%unnamed_75(108) = load %unnamed_74(107)
	%unnamed_76(109) = add %j(93) 1
	%unnamed_77(110) = mul %unnamed_76(109) 8
	%unnamed_78(111) = add %unnamed_75(108) %unnamed_77(110)
	%unnamed_79(112) = load %unnamed_73(106)
	%unnamed_80(113) = load %unnamed_78(111)
	%unnamed_81(114) = load %unnamed_78(111)
	store %unnamed_81(114) %unnamed_73(106)
	%unnamed_82(115) = add %this(91) 0
	%unnamed_83(116) = load %unnamed_82(115)
	%unnamed_84(117) = add %j(93) 1
	%unnamed_85(118) = mul %unnamed_84(117) 8
	%unnamed_86(119) = add %unnamed_83(116) %unnamed_85(118)
	%unnamed_87(120) = load %unnamed_86(119)
	store %t(101) %unnamed_86(119)
	ret
}

func Array_Node.doubleStorage %this(121) {
entry(122):
	%unnamed_88(123) = add %this(121) 0
	%unnamed_89(124) = load %unnamed_88(123)
	%copy(125) = move %unnamed_89(124)
	%unnamed_90(126) = add %this(121) 4
	%unnamed_91(127) = load %unnamed_90(126)
	%szCopy(128) = move %unnamed_91(127)
	%unnamed_92(129) = add %this(121) 0
	%unnamed_94(130) = call array.size %copy(125)
	%unnamed_95(131) = mul %unnamed_94(130) 2
	%unnamed_96(132) = mul %unnamed_95(131) 8
	%unnamed_97(133) = add %unnamed_96(132) 4
	%unnamed_93(134) = alloc %unnamed_97(133)
	store %unnamed_95(131) %unnamed_93(134)
	%unnamed_98(135) = load %unnamed_92(129)
	store %unnamed_93(134) %unnamed_92(129)
	%unnamed_99(136) = add %this(121) 4
	%unnamed_100(137) = load %unnamed_99(136)
	store 0 %unnamed_99(136)
	jump unnamed_5(138)
unnamed_5(138):
	%unnamed_101(139) = add %this(121) 4
	%unnamed_102(140) = load %unnamed_101(139)
	%unnamed_103(141) = neq %unnamed_102(140) %szCopy(128)
	br %unnamed_103(141) unnamed_6(142) unnamed_7(143)
unnamed_6(142):
	%unnamed_106(144) = add %this(121) 0
	%unnamed_107(145) = add %this(121) 4
	%unnamed_108(146) = load %unnamed_106(144)
	%unnamed_109(147) = load %unnamed_107(145)
	%unnamed_110(148) = add %unnamed_109(147) 1
	%unnamed_111(149) = mul %unnamed_110(148) 8
	%unnamed_112(150) = add %unnamed_108(146) %unnamed_111(149)
	%unnamed_113(151) = add %this(121) 4
	%unnamed_114(152) = load %unnamed_113(151)
	%unnamed_115(153) = add %unnamed_114(152) 1
	%unnamed_116(154) = mul %unnamed_115(153) 8
	%unnamed_117(155) = add %copy(125) %unnamed_116(154)
	%unnamed_118(156) = load %unnamed_112(150)
	%unnamed_119(157) = load %unnamed_117(155)
	%unnamed_120(158) = load %unnamed_117(155)
	store %unnamed_120(158) %unnamed_112(150)
	jump unnamed_8(159)
unnamed_8(159):
	%unnamed_104(160) = add %this(121) 4
	%unnamed_105(161) = load %unnamed_104(160)
	%unnamed_105(161) = add %unnamed_105(161) 1
	store %unnamed_105(161) %unnamed_104(160)
	jump unnamed_5(138)
unnamed_7(143):
	ret
}

func Heap_Node.Heap_Node %this(162) {
entry(163):
	%unnamed_121(164) = add %this(162) 0
	%unnamed_122(165) = alloc 8
	call Array_Node.Array_Node %unnamed_122(165)
	%unnamed_123(166) = load %unnamed_121(164)
	store %unnamed_122(165) %unnamed_121(164)
	ret
}

func Heap_Node.push %this(167) %v(168) {
entry(169):
	%unnamed_124(170) = add %this(167) 0
	%unnamed_125(171) = load %unnamed_124(170)
	call Array_Node.push_back %unnamed_125(171) %v(168)
	%unnamed_126(172) = call Heap_Node.size %this(167)
	%unnamed_127(173) = sub %unnamed_126(172) 1
	%x(174) = move %unnamed_127(173)
	%unnamed_128(175) = add %v(168) 4
	%unnamed_129(176) = load %unnamed_128(175)
	call printlnInt %unnamed_129(176)
	%unnamed_130(177) = add %this(167) 0
	%unnamed_132(178) = load %unnamed_130(177)
	%unnamed_131(179) = call Array_Node.get %unnamed_132(178) %x(174)
	%unnamed_133(180) = call Node.key_ %unnamed_131(179)
	call printlnInt %unnamed_133(180)
	ret
}

func Heap_Node.pop %this(181) {
entry(182):
	%unnamed_134(183) = add %this(181) 0
	%unnamed_136(184) = load %unnamed_134(183)
	%unnamed_135(185) = call Array_Node.front %unnamed_136(184)
	%res(186) = move %unnamed_135(185)
	%unnamed_137(187) = add %this(181) 0
	%unnamed_138(188) = call Heap_Node.size %this(181)
	%unnamed_139(189) = sub %unnamed_138(188) 1
	%unnamed_140(190) = load %unnamed_137(187)
	call Array_Node.swap %unnamed_140(190) 0 %unnamed_139(189)
	%unnamed_141(191) = add %this(181) 0
	%unnamed_143(192) = load %unnamed_141(191)
	%unnamed_142(193) = call Array_Node.pop_back %unnamed_143(192)
	call Heap_Node.maxHeapify %this(181) 0
	ret %res(186)
}

func Heap_Node.top %this(194) {
entry(195):
	%unnamed_144(196) = add %this(194) 0
	%unnamed_146(197) = load %unnamed_144(196)
	%unnamed_145(198) = call Array_Node.front %unnamed_146(197)
	ret %unnamed_145(198)
}

func Heap_Node.size %this(199) {
entry(200):
	%unnamed_147(201) = add %this(199) 0
	%unnamed_149(202) = load %unnamed_147(201)
	%unnamed_148(203) = call Array_Node.size %unnamed_149(202)
	ret %unnamed_148(203)
}

func Heap_Node.lchild %this(204) %x(205) {
entry(206):
	%unnamed_150(207) = mul %x(205) 2
	%unnamed_151(208) = add %unnamed_150(207) 1
	ret %unnamed_151(208)
}

func Heap_Node.rchild %this(209) %x(210) {
entry(211):
	%unnamed_152(212) = mul %x(210) 2
	%unnamed_153(213) = add %unnamed_152(212) 2
	ret %unnamed_153(213)
}

func Heap_Node.pnt %this(214) %x(215) {
entry(216):
	%unnamed_154(217) = sub %x(215) 1
	%unnamed_155(218) = div %unnamed_154(217) 2
	ret %unnamed_155(218)
}

func Heap_Node.maxHeapify %this(219) %x(220) {
entry(221):
	%unnamed_156(222) = call Heap_Node.lchild %this(219) %x(220)
	%l(223) = move %unnamed_156(222)
	%unnamed_157(224) = call Heap_Node.rchild %this(219) %x(220)
	%r(225) = move %unnamed_157(224)
	%largest(226) = move %x(220)
	%unnamed_158(227) = call Heap_Node.size %this(219)
	%unnamed_159(228) = lt %l(223) %unnamed_158(227)
	br %unnamed_159(228) if_then(229) if_exit(230)
if_then(229):
	%unnamed_160(231) = add %this(219) 0
	%unnamed_162(232) = load %unnamed_160(231)
	%unnamed_161(233) = call Array_Node.get %unnamed_162(232) %l(223)
	%unnamed_163(234) = call Node.key_ %unnamed_161(233)
	%unnamed_164(235) = add %this(219) 0
	%unnamed_166(236) = load %unnamed_164(235)
	%unnamed_165(237) = call Array_Node.get %unnamed_166(236) %largest(226)
	%unnamed_167(238) = call Node.key_ %unnamed_165(237)
	%unnamed_168(239) = gt %unnamed_163(234) %unnamed_167(238)
	br %unnamed_168(239) if_then(240) if_exit(241)
if_then(240):
	%largest(226) = move %l(223)
	jump if_exit(241)
if_exit(241):
	jump if_exit(230)
if_exit(230):
	%unnamed_169(242) = call Heap_Node.size %this(219)
	%unnamed_170(243) = lt %r(225) %unnamed_169(242)
	br %unnamed_170(243) if_then(244) if_exit(245)
if_then(244):
	%unnamed_171(246) = add %this(219) 0
	%unnamed_173(247) = load %unnamed_171(246)
	%unnamed_172(248) = call Array_Node.get %unnamed_173(247) %r(225)
	%unnamed_174(249) = call Node.key_ %unnamed_172(248)
	%unnamed_175(250) = add %this(219) 0
	%unnamed_177(251) = load %unnamed_175(250)
	%unnamed_176(252) = call Array_Node.get %unnamed_177(251) %largest(226)
	%unnamed_178(253) = call Node.key_ %unnamed_176(252)
	%unnamed_179(254) = gt %unnamed_174(249) %unnamed_178(253)
	br %unnamed_179(254) if_then(255) if_exit(256)
if_then(255):
	%largest(226) = move %r(225)
	jump if_exit(256)
if_exit(256):
	jump if_exit(245)
if_exit(245):
	%unnamed_180(257) = eq %largest(226) %x(220)
	br %unnamed_180(257) if_then(258) if_exit(259)
if_then(258):
	jump func_exit(260)
func_exit(260):
	ret
if_exit(259):
	%unnamed_181(261) = add %this(219) 0
	%unnamed_182(262) = load %unnamed_181(261)
	call Array_Node.swap %unnamed_182(262) %x(220) %largest(226)
	call Heap_Node.maxHeapify %this(219) %largest(226)
	jump func_exit(260)
}

func Node.key_ %this(263) {
entry(264):
	%unnamed_183(265) = add %this(263) 4
	%unnamed_184(266) = load %unnamed_183(265)
	ret %unnamed_184(266)
}

func main {
entry(267):
	%unnamed_185(268) = alloc 4
	call Heap_Node.Heap_Node %unnamed_185(268)
	%q(269) = move %unnamed_185(268)
	%unnamed_186(270) = alloc 8
	%node(271) = move %unnamed_186(270)
	%unnamed_187(272) = add %node(271) 0
	%unnamed_188(273) = load %unnamed_187(272)
	store 1 %unnamed_187(272)
	%unnamed_189(274) = add %node(271) 4
	%unnamed_190(275) = load %unnamed_189(274)
	store 3 %unnamed_189(274)
	call Heap_Node.push %q(269) %node(271)
	%unnamed_191(276) = alloc 8
	%node(271) = move %unnamed_191(276)
	%unnamed_192(277) = add %node(271) 0
	%unnamed_193(278) = load %unnamed_192(277)
	store 2 %unnamed_192(277)
	%unnamed_194(279) = add %node(271) 4
	%unnamed_195(280) = load %unnamed_194(279)
	store 4 %unnamed_194(279)
	call Heap_Node.push %q(269) %node(271)
	ret 0
}

