- {case: ./basic-package/basic-25.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [2:4][SemanticException] lvalue required as left operand of ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:364)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [2:4][SemanticException] lvalue required as left operand of ASS\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-40.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:4][SyntaxException] mismatched input 'void' expecting {'{', '}', ';', '(',\
    \ '++', '--', '+', '-', '!', '~', 'int', 'bool', 'string', 'if', 'for', 'while',\
    \ 'break', 'continue', 'return', 'new', 'this', IntegerConstant, StringConstant,\
    \ NullConstant, BoolConstant, Identifier}\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)\n\
    \tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1108)\n\tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[2:4][SyntaxException] mismatched input\
    \ 'void' expecting {'{', '}', ';', '(', '++', '--', '+', '-', '!', '~', 'int',\
    \ 'bool', 'string', 'if', 'for', 'while', 'break', 'continue', 'return', 'new',\
    \ 'this', IntegerConstant, StringConstant, NullConstant, BoolConstant, Identifier}\n",
  stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-11.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-50.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [13:10][SemanticException] illegal access of class member : A\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:187)\n\
    \tat Compiler.AST.MemberExprNode.accept(MemberExprNode.java:26)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:204)\n\
    \tat Compiler.AST.FuncCallExprNode.accept(FuncCallExprNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [13:10][SemanticException] illegal access of class member : A\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-4.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [0:0][SemanticException] no main function\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.mainFuncChecker(SemanticInfoVisitor.java:32)\n\
    \tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:40)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [0:0][SemanticException] no main function\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-64.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-35.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:0][SemanticException] redefinition of function :main\n\tat Compiler.SemanticAnalysis.GlobalFuncDeclVisitor.visit(GlobalFuncDeclVisitor.java:25)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.GlobalFuncDeclVisitor.visit(GlobalFuncDeclVisitor.java:18)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:37)\n\
    [4:0][SemanticException] redefinition of function :main\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-15.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [2:4][SemanticException] lvalue required as left operand of ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:364)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [2:4][SemanticException] lvalue required as left operand of ASS\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-44.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-70.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:22][SyntaxException] the shape of multidimensional array must be specified\
    \ from left to right\n\tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:288)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$ArrayCreatorContext.accept(MxstarParser.java:2003)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:245)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$NewExprContext.accept(MxstarParser.java:1468)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:74)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$SingleVariableContext.accept(MxstarParser.java:493)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:67)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableListContext.accept(MxstarParser.java:439)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:59)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableDeclContext.accept(MxstarParser.java:396)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:30)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$DeclarationContext.accept(MxstarParser.java:185)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:19)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$ProgramContext.accept(MxstarParser.java:130)\n\t\
    at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.Main.main(Main.java:32)\n[2:22][SyntaxException] the shape of multidimensional\
    \ array must be specified from left to right\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-21.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [9:8][SemanticException] invalid operands of types 'A' and 'A' to binary operator\
    \ ADD\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:295)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:282)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [9:8][SemanticException] invalid operands of types 'A' and 'A' to binary operator\
    \ ADD\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-31.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [2:4][SemanticException] lvalue required as left operand of ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:364)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [2:4][SemanticException] lvalue required as left operand of ASS\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-60.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-54.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:10][SemanticException] undefined class : B\n\tat Compiler.SemanticAnalysis.SymbolTableAssistant.typeNode2VarType(SymbolTableAssistant.java:33)\n\
    \tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:211)\n\
    \tat Compiler.AST.NewExprNode.accept(NewExprNode.java:41)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:41)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [4:10][SemanticException] undefined class : B\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-14.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [2:4][SemanticException] undefined class : A\n\tat Compiler.SemanticAnalysis.SymbolTableAssistant.typeNode2VarType(SymbolTableAssistant.java:33)\n\
    \tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:39)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [2:4][SemanticException] undefined class : A\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-45.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:8][SyntaxException] mismatched input 'void' expecting {'int', 'bool', 'string',\
    \ Identifier}\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)\n\
    \tat Compiler.Parser.MxstarParser.creator(MxstarParser.java:2092)\n\tat Compiler.Parser.MxstarParser.expression(MxstarParser.java:1589)\n\
    \tat Compiler.Parser.MxstarParser.statement(MxstarParser.java:1027)\n\tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1095)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [2:8][SyntaxException] mismatched input 'void' expecting {'int', 'bool', 'string',\
    \ Identifier}\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-71.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-20.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [5:4][SemanticException] redeclaration of variable : c\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:46)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [5:4][SemanticException] redeclaration of variable : c\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-30.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [14:4][SemanticException] lvalue required as left operand of ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:364)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [14:4][SemanticException] lvalue required as left operand of ASS\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-61.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:0][SyntaxException] missing ';' at 'int'\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportMissingToken(DefaultErrorStrategy.java:409)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenInsertion(DefaultErrorStrategy.java:519)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.recoverInline(DefaultErrorStrategy.java:476)\n\
    \tat org.antlr.v4.runtime.Parser.match(Parser.java:206)\n\tat Compiler.Parser.MxstarParser.classDecl(MxstarParser.java:299)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:201)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[2:0][SyntaxException] missing ';' at 'int'\n",
  stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-55.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-1.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-24.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:12][SemanticException] invalid operands of types 'string' and 'int' to binary\
    \ operator SHR\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:359)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:41)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:12][SemanticException] invalid operands of types 'string' and 'int' to binary\
    \ operator SHR\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-41.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-10.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-51.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:8][SemanticException] 'this' should be inside class\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:128)\n\
    \tat Compiler.AST.ThisExprNode.accept(ThisExprNode.java:15)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:251)\n\
    \tat Compiler.AST.ReturnStmtNode.accept(ReturnStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:8][SemanticException] 'this' should be inside class\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-5.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:1][SyntaxException] extraneous input 'void' expecting {'{', '}', ';', '(',\
    \ '++', '--', '+', '-', '!', '~', 'int', 'bool', 'string', 'if', 'for', 'while',\
    \ 'break', 'continue', 'return', 'new', 'this', IntegerConstant, StringConstant,\
    \ NullConstant, BoolConstant, Identifier}\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportUnwantedToken(DefaultErrorStrategy.java:377)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenDeletion(DefaultErrorStrategy.java:548)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.sync(DefaultErrorStrategy.java:266)\n\
    \tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1089)\n\tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[3:1][SyntaxException] extraneous input\
    \ 'void' expecting {'{', '}', ';', '(', '++', '--', '+', '-', '!', '~', 'int',\
    \ 'bool', 'string', 'if', 'for', 'while', 'break', 'continue', 'return', 'new',\
    \ 'this', IntegerConstant, StringConstant, NullConstant, BoolConstant, Identifier}\n",
  stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-65.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-34.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [2:11][SemanticException] redeclaration of variable : x\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:46)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [2:11][SemanticException] redeclaration of variable : x\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-46.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [10:4][SyntaxException] extraneous input 'void' expecting {'{', '}', ';', '(',\
    \ '++', '--', '+', '-', '!', '~', 'int', 'bool', 'string', 'if', 'for', 'while',\
    \ 'break', 'continue', 'return', 'new', 'this', IntegerConstant, StringConstant,\
    \ NullConstant, BoolConstant, Identifier}\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportUnwantedToken(DefaultErrorStrategy.java:377)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenDeletion(DefaultErrorStrategy.java:548)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.sync(DefaultErrorStrategy.java:266)\n\
    \tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1089)\n\tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[10:4][SyntaxException] extraneous input\
    \ 'void' expecting {'{', '}', ';', '(', '++', '--', '+', '-', '!', '~', 'int',\
    \ 'bool', 'string', 'if', 'for', 'while', 'break', 'continue', 'return', 'new',\
    \ 'this', IntegerConstant, StringConstant, NullConstant, BoolConstant, Identifier}\n",
  stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-17.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-23.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:4][SyntaxException] extraneous input 'void' expecting {'{', '}', ';', '(',\
    \ '++', '--', '+', '-', '!', '~', 'int', 'bool', 'string', 'if', 'for', 'while',\
    \ 'break', 'continue', 'return', 'new', 'this', IntegerConstant, StringConstant,\
    \ NullConstant, BoolConstant, Identifier}\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportUnwantedToken(DefaultErrorStrategy.java:377)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenDeletion(DefaultErrorStrategy.java:548)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.sync(DefaultErrorStrategy.java:266)\n\
    \tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1089)\n\tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[2:4][SyntaxException] extraneous input\
    \ 'void' expecting {'{', '}', ';', '(', '++', '--', '+', '-', '!', '~', 'int',\
    \ 'bool', 'string', 'if', 'for', 'while', 'break', 'continue', 'return', 'new',\
    \ 'this', IntegerConstant, StringConstant, NullConstant, BoolConstant, Identifier}\n",
  stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-62.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-33.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [6:12][SemanticException] undeclared symbol : x\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:118)\n\
    \tat Compiler.AST.IdExprNode.accept(IdExprNode.java:22)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:204)\n\
    \tat Compiler.AST.FuncCallExprNode.accept(FuncCallExprNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:41)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [6:12][SemanticException] undeclared symbol : x\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-2.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-56.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-27.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [5:0][SemanticException] redefinition of class : A\n\tat Compiler.SemanticAnalysis.ClassDeclVisitor.visit(ClassDeclVisitor.java:28)\n\
    \tat Compiler.AST.ClassDeclNode.accept(ClassDeclNode.java:44)\n\tat Compiler.SemanticAnalysis.ClassDeclVisitor.visit(ClassDeclVisitor.java:21)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:36)\n\
    [5:0][SemanticException] redefinition of class : A\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-13.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [0:0][SemanticException] main function must return 'int'\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.mainFuncChecker(SemanticInfoVisitor.java:34)\n\
    \tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:40)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [0:0][SemanticException] main function must return 'int'\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-42.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [9:0][SemanticException] redefinition of function :x\n\tat Compiler.SemanticAnalysis.GlobalFuncDeclVisitor.visit(GlobalFuncDeclVisitor.java:25)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.GlobalFuncDeclVisitor.visit(GlobalFuncDeclVisitor.java:18)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:37)\n\
    [9:0][SemanticException] redefinition of function :x\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-6.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [7:2][SemanticException] invalid operands of types 'string' and 'int' to binary\
    \ operator ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:374)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [7:2][SemanticException] invalid operands of types 'string' and 'int' to binary\
    \ operator ASS\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-52.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [8:2][SemanticException] invalid operands of types 'bool' and 'int' to binary\
    \ operator ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:374)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:59)\n\
    \tat Compiler.AST.ClassDeclNode.accept(ClassDeclNode.java:44)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [8:2][SemanticException] invalid operands of types 'bool' and 'int' to binary\
    \ operator ASS\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-37.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [7:4][SemanticException] invalid operands of types 'int' and 'null' to binary\
    \ operator ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:374)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [7:4][SemanticException] invalid operands of types 'int' and 'null' to binary\
    \ operator ASS\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-66.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-26.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [12:4][SemanticException] mismatched type of the 2(st/nd/th) argument\n\tat\
    \ Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:155)\n\
    \tat Compiler.AST.FuncCallExprNode.accept(FuncCallExprNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:250)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [12:4][SemanticException] mismatched type of the 2(st/nd/th) argument\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-12.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:1][SemanticException] mismatched type of return value\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:217)\n\
    \tat Compiler.AST.ReturnStmtNode.accept(ReturnStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [3:1][SemanticException] mismatched type of return value\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-43.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [0:0][SemanticException] main function should not have parameters\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.mainFuncChecker(SemanticInfoVisitor.java:36)\n\
    \tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:40)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [0:0][SemanticException] main function should not have parameters\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-7.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [15:1][SemanticException] mismatched type of return value\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:217)\n\
    \tat Compiler.AST.ReturnStmtNode.accept(ReturnStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [15:1][SemanticException] mismatched type of return value\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-53.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-36.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [19:172][SyntaxException] the shape of multidimensional array must be specified\
    \ from left to right\n\tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:288)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$ArrayCreatorContext.accept(MxstarParser.java:2003)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:245)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$NewExprContext.accept(MxstarParser.java:1468)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:74)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$SingleVariableContext.accept(MxstarParser.java:493)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:67)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableListContext.accept(MxstarParser.java:439)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:59)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableDeclContext.accept(MxstarParser.java:396)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVarDeclStmt(ASTBuilder.java:131)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVarDeclStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VarDeclStmtContext.accept(MxstarParser.java:964)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:149)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$CompoundStmtContext.accept(MxstarParser.java:1074)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBlockStmt(ASTBuilder.java:127)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBlockStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$BlockStmtContext.accept(MxstarParser.java:975)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:149)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$CompoundStmtContext.accept(MxstarParser.java:1074)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBlockStmt(ASTBuilder.java:127)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBlockStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$BlockStmtContext.accept(MxstarParser.java:975)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:149)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$CompoundStmtContext.accept(MxstarParser.java:1074)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBlockStmt(ASTBuilder.java:127)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBlockStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$BlockStmtContext.accept(MxstarParser.java:975)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:149)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$CompoundStmtContext.accept(MxstarParser.java:1074)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:48)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$FunctionDeclContext.accept(MxstarParser.java:330)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:29)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$DeclarationContext.accept(MxstarParser.java:185)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:19)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$ProgramContext.accept(MxstarParser.java:130)\n\t\
    at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.Main.main(Main.java:32)\n[19:172][SyntaxException] the shape of\
    \ multidimensional array must be specified from left to right\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-67.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:12][SemanticException] lvalue required as left operand of POS_INC\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:395)\n\
    \tat Compiler.AST.UnaryExprNode.accept(UnaryExprNode.java:33)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:389)\n\
    \tat Compiler.AST.UnaryExprNode.accept(UnaryExprNode.java:33)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:389)\n\
    \tat Compiler.AST.UnaryExprNode.accept(UnaryExprNode.java:33)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:389)\n\
    \tat Compiler.AST.UnaryExprNode.accept(UnaryExprNode.java:33)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:389)\n\
    \tat Compiler.AST.UnaryExprNode.accept(UnaryExprNode.java:33)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [4:12][SemanticException] lvalue required as left operand of POS_INC\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-47.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-16.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:9][SemanticException] redeclaration of variable : f\n\tat Compiler.SemanticAnalysis.ClassMemberVisitor.visit(ClassMemberVisitor.java:42)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.ClassMemberVisitor.visit(ClassMemberVisitor.java:32)\n\
    \tat Compiler.AST.ClassDeclNode.accept(ClassDeclNode.java:44)\n\tat Compiler.SemanticAnalysis.ClassMemberVisitor.visit(ClassMemberVisitor.java:22)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:38)\n\
    [3:9][SemanticException] redeclaration of variable : f\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-22.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:12][SemanticException] not array type : int\n\tat Compiler.SemanticAnalysis.SymbolTableAssistant.arrayTypeDimDecrease(SymbolTableAssistant.java:63)\n\
    \tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:193)\n\
    \tat Compiler.AST.ArrayIdxExprNode.accept(ArrayIdxExprNode.java:25)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:41)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:12][SemanticException] not array type : int\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-63.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-32.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [2:8][SemanticException] invalid operands of types 'string' and 'string' to\
    \ binary operator LAND\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:383)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:220)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [2:8][SemanticException] invalid operands of types 'string' and 'string' to binary\
    \ operator LAND\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-3.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-57.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:4][SyntaxException] missing '{' at 'int'\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportMissingToken(DefaultErrorStrategy.java:409)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenInsertion(DefaultErrorStrategy.java:519)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.recoverInline(DefaultErrorStrategy.java:476)\n\
    \tat org.antlr.v4.runtime.Parser.match(Parser.java:206)\n\tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1087)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [2:4][SyntaxException] missing '{' at 'int'\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-29.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [10:4][SemanticException] invalid operands of types 'int' and 'A' to binary\
    \ operator ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:374)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [10:4][SemanticException] invalid operands of types 'int' and 'A' to binary operator\
    \ ASS\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-68.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [18:12][SyntaxException] extraneous input '(' expecting Identifier\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportUnwantedToken(DefaultErrorStrategy.java:377)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenDeletion(DefaultErrorStrategy.java:548)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.recoverInline(DefaultErrorStrategy.java:467)\n\
    \tat org.antlr.v4.runtime.Parser.match(Parser.java:206)\n\tat Compiler.Parser.MxstarParser.expression(MxstarParser.java:1889)\n\
    \tat Compiler.Parser.MxstarParser.statement(MxstarParser.java:1027)\n\tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1095)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [18:12][SyntaxException] extraneous input '(' expecting Identifier\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-39.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [7:0][SemanticException] undeclared symbol : i\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:118)\n\
    \tat Compiler.AST.IdExprNode.accept(IdExprNode.java:22)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:281)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [7:0][SemanticException] undeclared symbol : i\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-8.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:10][SyntaxException] mismatched input 'this' expecting Identifier\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)\n\
    \tat Compiler.Parser.MxstarParser.expression(MxstarParser.java:1959)\n\tat Compiler.Parser.MxstarParser.controlStatement(MxstarParser.java:1328)\n\
    \tat Compiler.Parser.MxstarParser.statement(MxstarParser.java:1037)\n\tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1095)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [3:10][SyntaxException] mismatched input 'this' expecting Identifier\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-19.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [7:20][SemanticException] mismatched type of return value\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:217)\n\
    \tat Compiler.AST.ReturnStmtNode.accept(ReturnStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:180)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:180)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:180)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:180)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:184)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [7:20][SemanticException] mismatched type of return value\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-48.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [7:1][SyntaxException] missing ';' at '<EOF>'\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportMissingToken(DefaultErrorStrategy.java:409)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenInsertion(DefaultErrorStrategy.java:519)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.recoverInline(DefaultErrorStrategy.java:476)\n\
    \tat org.antlr.v4.runtime.Parser.match(Parser.java:206)\n\tat Compiler.Parser.MxstarParser.classDecl(MxstarParser.java:299)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:201)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[7:1][SyntaxException] missing ';' at '<EOF>'\n",
  stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-58.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [6:14][SemanticException] undefined class : a\n\tat Compiler.SemanticAnalysis.SymbolTableAssistant.typeNode2VarType(SymbolTableAssistant.java:33)\n\
    \tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:211)\n\
    \tat Compiler.AST.NewExprNode.accept(NewExprNode.java:41)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:41)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [6:14][SemanticException] undefined class : a\n", stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-18.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-49.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-59.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-28.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-69.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./basic-package/basic-38.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [1:6][SyntaxException] mismatched input 'int' expecting Identifier\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)\n\
    \tat Compiler.Parser.MxstarParser.classDecl(MxstarParser.java:304)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:201)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [1:6][SyntaxException] mismatched input 'int' expecting Identifier\n", stdout: '',
  verdict: Accepted}
- {case: ./basic-package/basic-9.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:1][SemanticException] undeclared symbol : a\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:118)\n\
    \tat Compiler.AST.IdExprNode.accept(IdExprNode.java:22)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:281)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:1][SemanticException] undeclared symbol : a\n", stdout: '', verdict: Accepted}
- {case: ./builtin-func-package/builtin-4.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [7:4][SemanticException] undeclared symbol : size\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:157)\n\
    \tat Compiler.AST.MemberExprNode.accept(MemberExprNode.java:26)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:202)\n\
    \tat Compiler.AST.FuncCallExprNode.accept(FuncCallExprNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [7:4][SemanticException] undeclared symbol : size\n", stdout: '', verdict: Accepted}
- {case: ./builtin-func-package/builtin-1.mx, stage: semantic, stderr: '', stdout: '',
  verdict: Accepted}
- {case: ./builtin-func-package/builtin-2.mx, stage: semantic, stderr: '', stdout: '',
  verdict: Accepted}
- {case: ./builtin-func-package/builtin-3.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [7:4][SemanticException] undeclared symbol : size\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:157)\n\
    \tat Compiler.AST.MemberExprNode.accept(MemberExprNode.java:26)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:202)\n\
    \tat Compiler.AST.FuncCallExprNode.accept(FuncCallExprNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [7:4][SemanticException] undeclared symbol : size\n", stdout: '', verdict: Accepted}
- {case: ./if-package/if-3.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [6:4][SemanticException] if condition should be 'bool'\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:176)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [6:4][SemanticException] if condition should be 'bool'\n", stdout: '', verdict: Accepted}
- {case: ./if-package/if-2.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [6:4][SemanticException] if condition should be 'bool'\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:176)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [6:4][SemanticException] if condition should be 'bool'\n", stdout: '', verdict: Accepted}
- {case: ./if-package/if-1.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:1][SemanticException] if condition should be 'bool'\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:176)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [4:1][SemanticException] if condition should be 'bool'\n", stdout: '', verdict: Accepted}
- {case: ./codeforces-package/122A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/1A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/231A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/69A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/4A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/399A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/158A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/71A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/1145A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./codeforces-package/263A.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./breakcontinue-package/breakcontinue-3.mx, stage: semantic, stderr: '',
  stdout: '', verdict: Accepted}
- {case: ./breakcontinue-package/breakcontinue-2.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:4][SemanticException] continue statement not within a loop\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:233)\n\
    \tat Compiler.AST.ContStmtNode.accept(ContStmtNode.java:13)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [4:4][SemanticException] continue statement not within a loop\n", stdout: '',
  verdict: Accepted}
- {case: ./breakcontinue-package/breakcontinue-1.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:4][SemanticException] break statement not within a loop\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:228)\n\
    \tat Compiler.AST.BreakStmtNode.accept(BreakStmtNode.java:13)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [4:4][SemanticException] break statement not within a loop\n", stdout: '', verdict: Accepted}
- {case: ./breakcontinue-package/breakcontinue-5.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [6:4][SemanticException] break statement not within a loop\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:228)\n\
    \tat Compiler.AST.BreakStmtNode.accept(BreakStmtNode.java:13)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [6:4][SemanticException] break statement not within a loop\n", stdout: '', verdict: Accepted}
- {case: ./breakcontinue-package/breakcontinue-4.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:4][SemanticException] continue statement not within a loop\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:233)\n\
    \tat Compiler.AST.ContStmtNode.accept(ContStmtNode.java:13)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [3:4][SemanticException] continue statement not within a loop\n", stdout: '',
  verdict: Accepted}
- {case: ./expression-package/expression-5.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:4][SemanticException] wrong type argument 'string' to 'POS_INC'\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:399)\n\
    \tat Compiler.AST.UnaryExprNode.accept(UnaryExprNode.java:33)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:4][SemanticException] wrong type argument 'string' to 'POS_INC'\n", stdout: '',
  verdict: Accepted}
- {case: ./expression-package/expression-1.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:4][SemanticException] lvalue required as left operand of POS_INC\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:395)\n\
    \tat Compiler.AST.UnaryExprNode.accept(UnaryExprNode.java:33)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:4][SemanticException] lvalue required as left operand of POS_INC\n", stdout: '',
  verdict: Accepted}
- {case: ./expression-package/expression-4.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [16:4][SemanticException] lvalue required as left operand of ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:364)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [16:4][SemanticException] lvalue required as left operand of ASS\n", stdout: '',
  verdict: Accepted}
- {case: ./expression-package/expression-3.mx, stage: semantic, stderr: '', stdout: '',
  verdict: Accepted}
- {case: ./expression-package/expression-2.mx, stage: semantic, stderr: '', stdout: '',
  verdict: Accepted}
- {case: ./array-package/array-7.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./array-package/array-3.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [10:3][SemanticException] not array type : int\n\tat Compiler.SemanticAnalysis.SymbolTableAssistant.arrayTypeDimDecrease(SymbolTableAssistant.java:63)\n\
    \tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:193)\n\
    \tat Compiler.AST.ArrayIdxExprNode.accept(ArrayIdxExprNode.java:25)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:281)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:238)\n\
    \tat Compiler.AST.ForStmtNode.accept(ForStmtNode.java:36)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:238)\n\
    \tat Compiler.AST.ForStmtNode.accept(ForStmtNode.java:36)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [10:3][SemanticException] not array type : int\n", stdout: '', verdict: Accepted}
- {case: ./array-package/array-2.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./array-package/array-6.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [5:4][SemanticException] invalid operands of types 'int[3]' and 'int[2]' to\
    \ binary operator ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:374)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [5:4][SemanticException] invalid operands of types 'int[3]' and 'int[2]' to binary\
    \ operator ASS\n", stdout: '', verdict: Accepted}
- {case: ./array-package/array-9.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./array-package/array-8.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [5:12][SemanticException] array index should be 'int'\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:141)\n\
    \tat Compiler.AST.ArrayIdxExprNode.accept(ArrayIdxExprNode.java:25)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:54)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:48)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:246)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [5:12][SemanticException] array index should be 'int'\n", stdout: '', verdict: Accepted}
- {case: ./array-package/array-1.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./array-package/array-11.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:22][SyntaxException] the shape of multidimensional array must be specified\
    \ from left to right\n\tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:288)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$ArrayCreatorContext.accept(MxstarParser.java:2003)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:245)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$NewExprContext.accept(MxstarParser.java:1468)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:74)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$SingleVariableContext.accept(MxstarParser.java:493)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:67)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableListContext.accept(MxstarParser.java:439)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:59)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableDeclContext.accept(MxstarParser.java:396)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVarDeclStmt(ASTBuilder.java:131)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVarDeclStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VarDeclStmtContext.accept(MxstarParser.java:964)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:149)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$CompoundStmtContext.accept(MxstarParser.java:1074)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:48)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$FunctionDeclContext.accept(MxstarParser.java:330)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:29)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$DeclarationContext.accept(MxstarParser.java:185)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:19)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$ProgramContext.accept(MxstarParser.java:130)\n\t\
    at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.Main.main(Main.java:32)\n[3:22][SyntaxException] the shape of multidimensional\
    \ array must be specified from left to right\n", stdout: '', verdict: Accepted}
- {case: ./array-package/array-5.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./array-package/array-4.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:18][SyntaxException] the shape of multidimensional array must be specified\
    \ from left to right\n\tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:288)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitArrayCreator(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$ArrayCreatorContext.accept(MxstarParser.java:2003)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:245)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitNewExpr(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$NewExprContext.accept(MxstarParser.java:1468)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:74)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitSingleVariable(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$SingleVariableContext.accept(MxstarParser.java:493)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:67)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableList(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableListContext.accept(MxstarParser.java:439)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:59)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVariableDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VariableDeclContext.accept(MxstarParser.java:396)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVarDeclStmt(ASTBuilder.java:131)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitVarDeclStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$VarDeclStmtContext.accept(MxstarParser.java:964)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:149)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$CompoundStmtContext.accept(MxstarParser.java:1074)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:48)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$FunctionDeclContext.accept(MxstarParser.java:330)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:29)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$DeclarationContext.accept(MxstarParser.java:185)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:19)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$ProgramContext.accept(MxstarParser.java:130)\n\t\
    at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.Main.main(Main.java:32)\n[2:18][SyntaxException] the shape of multidimensional\
    \ array must be specified from left to right\n", stdout: '', verdict: Accepted}
- {case: ./array-package/array-10.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:22][SemanticException] the size of array should be of 'int' type\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:170)\n\
    \tat Compiler.AST.NewExprNode.accept(NewExprNode.java:41)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:54)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:48)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:246)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [3:22][SemanticException] the size of array should be of 'int' type\n", stdout: '',
  verdict: Accepted}
- {case: ./loop-package/loop-3.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:1][SemanticException] for condition should be 'bool'\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:199)\n\
    \tat Compiler.AST.ForStmtNode.accept(ForStmtNode.java:36)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [4:1][SemanticException] for condition should be 'bool'\n", stdout: '', verdict: Accepted}
- {case: ./loop-package/loop-2.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./loop-package/loop-1.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:4][SemanticException] for condition should be 'bool'\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:199)\n\
    \tat Compiler.AST.ForStmtNode.accept(ForStmtNode.java:36)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [4:4][SemanticException] for condition should be 'bool'\n", stdout: '', verdict: Accepted}
- {case: ./string-package/string-1.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./symbol-package/symbol-7.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [2:4][SyntaxException] no viable alternative at input 'intthis'\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportNoViableAlternative(DefaultErrorStrategy.java:310)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:136)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:222)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[2:4][SyntaxException] no viable alternative\
    \ at input 'intthis'\n", stdout: '', verdict: Accepted}
- {case: ./symbol-package/symbol-3.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:8][SyntaxException] mismatched input '123' expecting {'[', Identifier}\n\t\
    at Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)\n\
    \tat Compiler.Parser.MxstarParser.singleVariable(MxstarParser.java:523)\n\tat\
    \ Compiler.Parser.MxstarParser.variableList(MxstarParser.java:452)\n\tat Compiler.Parser.MxstarParser.variableDecl(MxstarParser.java:410)\n\
    \tat Compiler.Parser.MxstarParser.statement(MxstarParser.java:1019)\n\tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1095)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [3:8][SyntaxException] mismatched input '123' expecting {'[', Identifier}\n",
  stdout: '', verdict: Accepted}
- {case: ./symbol-package/symbol-2.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:8][SyntaxException] token recognition error at: '_'\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Lexer.notifyListeners(Lexer.java:364)\n\tat org.antlr.v4.runtime.Lexer.nextToken(Lexer.java:144)\n\
    \tat org.antlr.v4.runtime.BufferedTokenStream.fetch(BufferedTokenStream.java:169)\n\
    \tat org.antlr.v4.runtime.BufferedTokenStream.sync(BufferedTokenStream.java:152)\n\
    \tat org.antlr.v4.runtime.BufferedTokenStream.consume(BufferedTokenStream.java:136)\n\
    \tat org.antlr.v4.runtime.Parser.consume(Parser.java:571)\n\tat org.antlr.v4.runtime.Parser.match(Parser.java:203)\n\
    \tat Compiler.Parser.MxstarParser.nonArrayType(MxstarParser.java:893)\n\tat Compiler.Parser.MxstarParser.type(MxstarParser.java:793)\n\
    \tat Compiler.Parser.MxstarParser.variableDecl(MxstarParser.java:408)\n\tat Compiler.Parser.MxstarParser.statement(MxstarParser.java:1019)\n\
    \tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1095)\n\tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[3:8][SyntaxException] token recognition\
    \ error at: '_'\n", stdout: '', verdict: Accepted}
- {case: ./symbol-package/symbol-6.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:9][SyntaxException] mismatched input 'this' expecting Identifier\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:374)\n\tat Compiler.Parser.MxstarParser.classDecl(MxstarParser.java:281)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:201)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[3:9][SyntaxException] mismatched input\
    \ 'this' expecting Identifier\n", stdout: '', verdict: Accepted}
- {case: ./symbol-package/symbol-1.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./symbol-package/symbol-5.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:8][SyntaxException] mismatched input 'int' expecting {'[', Identifier}\n\t\
    at Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)\n\
    \tat Compiler.Parser.MxstarParser.singleVariable(MxstarParser.java:523)\n\tat\
    \ Compiler.Parser.MxstarParser.variableList(MxstarParser.java:452)\n\tat Compiler.Parser.MxstarParser.variableDecl(MxstarParser.java:410)\n\
    \tat Compiler.Parser.MxstarParser.statement(MxstarParser.java:1019)\n\tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1095)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [3:8][SyntaxException] mismatched input 'int' expecting {'[', Identifier}\n",
  stdout: '', verdict: Accepted}
- {case: ./symbol-package/symbol-4.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:8][SemanticException] redeclaration of variable : a\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:46)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [4:8][SemanticException] redeclaration of variable : a\n", stdout: '', verdict: Accepted}
- {case: ./function-package/function-3.mx, stage: semantic, stderr: "java.lang.ClassCastException:\
    \ class Compiler.SymbolTable.Symbol.VarSymbol cannot be cast to class Compiler.SymbolTable.Symbol.FuncSymbol\
    \ (Compiler.SymbolTable.Symbol.VarSymbol and Compiler.SymbolTable.Symbol.FuncSymbol\
    \ are in unnamed module of loader 'app')\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:207)\n\
    \tat Compiler.AST.FuncCallExprNode.accept(FuncCallExprNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    class Compiler.SymbolTable.Symbol.VarSymbol cannot be cast to class Compiler.SymbolTable.Symbol.FuncSymbol\
    \ (Compiler.SymbolTable.Symbol.VarSymbol and Compiler.SymbolTable.Symbol.FuncSymbol\
    \ are in unnamed module of loader 'app')\n", stdout: '', verdict: Accepted}
- {case: ./function-package/function-2.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [8:0][SemanticException] undefined class : B\n\tat Compiler.SemanticAnalysis.SymbolTableAssistant.typeNode2VarType(SymbolTableAssistant.java:33)\n\
    \tat Compiler.SemanticAnalysis.GlobalFuncDeclVisitor.visit(GlobalFuncDeclVisitor.java:27)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.GlobalFuncDeclVisitor.visit(GlobalFuncDeclVisitor.java:18)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:37)\n\
    [8:0][SemanticException] undefined class : B\n", stdout: '', verdict: Accepted}
- {case: ./function-package/function-6.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [3:8][SyntaxException] token recognition error at: '_'\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Lexer.notifyListeners(Lexer.java:364)\n\tat org.antlr.v4.runtime.Lexer.nextToken(Lexer.java:144)\n\
    \tat org.antlr.v4.runtime.BufferedTokenStream.fetch(BufferedTokenStream.java:169)\n\
    \tat org.antlr.v4.runtime.BufferedTokenStream.sync(BufferedTokenStream.java:152)\n\
    \tat org.antlr.v4.runtime.BufferedTokenStream.consume(BufferedTokenStream.java:136)\n\
    \tat org.antlr.v4.runtime.atn.ParserATNSimulator.execATN(ParserATNSimulator.java:537)\n\
    \tat org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(ParserATNSimulator.java:393)\n\
    \tat Compiler.Parser.MxstarParser.classDecl(MxstarParser.java:277)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:201)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [3:8][SyntaxException] token recognition error at: '_'\n", stdout: '', verdict: Accepted}
- {case: ./function-package/function-1.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [8:8][SemanticException] mismatched size of arguments\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:150)\n\
    \tat Compiler.AST.FuncCallExprNode.accept(FuncCallExprNode.java:31)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:255)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:250)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [8:8][SemanticException] mismatched size of arguments\n", stdout: '', verdict: Accepted}
- {case: ./function-package/function-5.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [12:10][SemanticException] mismatched type : 'int[1]' and 'int[2]'\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:43)\n\
    \tat Compiler.AST.VarDeclNode.accept(VarDeclNode.java:46)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:33)\n\
    \tat Compiler.AST.VarDeclListNode.accept(VarDeclListNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:273)\n\
    \tat Compiler.AST.VarDeclStmtNode.accept(VarDeclStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [12:10][SemanticException] mismatched type : 'int[1]' and 'int[2]'\n", stdout: '',
  verdict: Accepted}
- {case: ./function-package/function-4.mx, stage: semantic, stderr: '', stdout: '',
  verdict: Accepted}
- {case: ./class-package/class-5.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-1.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-4.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [11:0][SyntaxException] missing ';' at 'int'\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportMissingToken(DefaultErrorStrategy.java:409)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenInsertion(DefaultErrorStrategy.java:519)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.recoverInline(DefaultErrorStrategy.java:476)\n\
    \tat org.antlr.v4.runtime.Parser.match(Parser.java:206)\n\tat Compiler.Parser.MxstarParser.classDecl(MxstarParser.java:299)\n\
    \tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:201)\n\tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\
    \tat Compiler.Main.main(Main.java:30)\n[11:0][SyntaxException] missing ';' at\
    \ 'int'\n", stdout: '', verdict: Accepted}
- {case: ./class-package/class-15.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-11.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-10.mx, stage: semantic, stderr: "java.lang.NumberFormatException:\
    \ For input string: \"2147483648\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:656)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:770)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitIntegerConstant(ASTBuilder.java:306)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitIntegerConstant(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$IntegerConstantContext.accept(MxstarParser.java:2144)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitConstExpr(ASTBuilder.java:189)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitConstExpr(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$ConstExprContext.accept(MxstarParser.java:1389)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitUnaryOpExpr(ASTBuilder.java:260)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitUnaryOpExpr(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$UnaryOpExprContext.accept(MxstarParser.java:1492)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBinaryExpr(ASTBuilder.java:217)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitBinaryExpr(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$BinaryExprContext.accept(MxstarParser.java:1456)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitExprStmt(ASTBuilder.java:135)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitExprStmt(ASTBuilder.java:13)\n\t\
    at Compiler.Parser.MxstarParser$ExprStmtContext.accept(MxstarParser.java:953)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:149)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitCompoundStmt(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$CompoundStmtContext.accept(MxstarParser.java:1074)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:48)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitFunctionDecl(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$FunctionDeclContext.accept(MxstarParser.java:330)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:29)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitDeclaration(ASTBuilder.java:13)\n\
    \tat Compiler.Parser.MxstarParser$DeclarationContext.accept(MxstarParser.java:185)\n\
    \tat org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:19)\n\t\
    at Compiler.SemanticAnalysis.ASTBuilder.visitProgram(ASTBuilder.java:13)\n\tat\
    \ Compiler.Parser.MxstarParser$ProgramContext.accept(MxstarParser.java:130)\n\t\
    at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)\n\
    \tat Compiler.Main.main(Main.java:32)\nFor input string: \"2147483648\"\n", stdout: '',
  verdict: Accepted}
- {case: ./class-package/class-14.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [4:4][SemanticException] constructor return type error : b\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:81)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:61)\n\
    \tat Compiler.AST.ClassDeclNode.accept(ClassDeclNode.java:44)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [4:4][SemanticException] constructor return type error : b\n", stdout: '', verdict: Accepted}
- {case: ./class-package/class-9.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-13.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-16.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:4][SemanticException] mismatched constructor name : A\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:78)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:61)\n\
    \tat Compiler.AST.ClassDeclNode.accept(ClassDeclNode.java:44)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [3:4][SemanticException] mismatched constructor name : A\n", stdout: '', verdict: Accepted}
- {case: ./class-package/class-8.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [5:8][SemanticException] mismatched type of return value\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:217)\n\
    \tat Compiler.AST.ReturnStmtNode.accept(ReturnStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:240)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:71)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:61)\n\
    \tat Compiler.AST.ClassDeclNode.accept(ClassDeclNode.java:44)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [5:8][SemanticException] mismatched type of return value\n", stdout: '', verdict: Accepted}
- {case: ./class-package/class-12.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [2:2][SemanticException] mismatched constructor name : B\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:78)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:61)\n\
    \tat Compiler.AST.ClassDeclNode.accept(ClassDeclNode.java:44)\n\tat Compiler.SemanticAnalysis.SemanticInfoVisitor.visit(SemanticInfoVisitor.java:42)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:40)\n\
    [2:2][SemanticException] mismatched constructor name : B\n", stdout: '', verdict: Accepted}
- {case: ./class-package/class-3.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-7.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-6.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./class-package/class-2.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-3.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-29.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-7.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-19.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-6.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-18.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-2.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-28.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-23.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-17.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-9.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-33.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-13.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-27.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-37.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-12.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-26.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-36.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-22.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-16.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-8.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-32.mx, stage: semantic, stderr: "Compiler.Utils.SyntaxException:\
    \ [52:24][SyntaxException] extraneous input '>' expecting {'(', '++', '--', '+',\
    \ '-', '!', '~', 'new', 'this', IntegerConstant, StringConstant, NullConstant,\
    \ BoolConstant, Identifier}\n\tat Compiler.Parser.MxstarErrorListener.syntaxError(MxstarErrorListener.java:12)\n\
    \tat org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)\n\
    \tat org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)\n\tat org.antlr.v4.runtime.DefaultErrorStrategy.reportUnwantedToken(DefaultErrorStrategy.java:377)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.singleTokenDeletion(DefaultErrorStrategy.java:548)\n\
    \tat org.antlr.v4.runtime.DefaultErrorStrategy.sync(DefaultErrorStrategy.java:266)\n\
    \tat Compiler.Parser.MxstarParser.expression(MxstarParser.java:1535)\n\tat Compiler.Parser.MxstarParser.expression(MxstarParser.java:1711)\n\
    \tat Compiler.Parser.MxstarParser.statement(MxstarParser.java:1027)\n\tat Compiler.Parser.MxstarParser.compoundStmt(MxstarParser.java:1095)\n\
    \tat Compiler.Parser.MxstarParser.functionDecl(MxstarParser.java:369)\n\tat Compiler.Parser.MxstarParser.declaration(MxstarParser.java:208)\n\
    \tat Compiler.Parser.MxstarParser.program(MxstarParser.java:149)\n\tat Compiler.Main.main(Main.java:30)\n\
    [52:24][SyntaxException] extraneous input '>' expecting {'(', '++', '--', '+',\
    \ '-', '!', '~', 'new', 'this', IntegerConstant, StringConstant, NullConstant,\
    \ BoolConstant, Identifier}\n", stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-11.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-25.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-35.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-21.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-15.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [28:31][SemanticException] not array type : int\n\tat Compiler.SemanticAnalysis.SymbolTableAssistant.arrayTypeDimDecrease(SymbolTableAssistant.java:63)\n\
    \tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:193)\n\
    \tat Compiler.AST.ArrayIdxExprNode.accept(ArrayIdxExprNode.java:25)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:281)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:282)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:281)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:220)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:238)\n\
    \tat Compiler.AST.ForStmtNode.accept(ForStmtNode.java:36)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:228)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [28:31][SemanticException] not array type : int\n", stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-31.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-20.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-14.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-30.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-10.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-24.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-34.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-5.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-1.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./misc-package/misc-4.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-3.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:8][SemanticException] undeclared symbol : a\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:118)\n\
    \tat Compiler.AST.IdExprNode.accept(IdExprNode.java:22)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:251)\n\
    \tat Compiler.AST.ReturnStmtNode.accept(ReturnStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:8][SemanticException] undeclared symbol : a\n", stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-7.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-6.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-2.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-8.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-5.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [12:0][SemanticException] invalid operands of types 'int' and 'string' to binary\
    \ operator ASS\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:374)\n\
    \tat Compiler.AST.BinaryExprNode.accept(BinaryExprNode.java:39)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:277)\n\
    \tat Compiler.AST.ExprStmtNode.accept(ExprStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:223)\n\
    \tat Compiler.AST.IfStmtNode.accept(IfStmtNode.java:31)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [12:0][SemanticException] invalid operands of types 'int' and 'string' to binary\
    \ operator ASS\n", stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-1.mx, stage: semantic, stderr: '', stdout: '', verdict: Accepted}
- {case: ./scope-package/scope-4.mx, stage: semantic, stderr: "Compiler.Utils.SemanticException:\
    \ [3:8][SemanticException] undeclared symbol : c\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:118)\n\
    \tat Compiler.AST.IdExprNode.accept(IdExprNode.java:22)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:251)\n\
    \tat Compiler.AST.ReturnStmtNode.accept(ReturnStmtNode.java:20)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:267)\n\
    \tat Compiler.AST.CompStmtNode.accept(CompStmtNode.java:34)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:85)\n\
    \tat Compiler.AST.FuncDeclNode.accept(FuncDeclNode.java:48)\n\tat Compiler.SemanticAnalysis.SymbolTableVisitor.visit(SymbolTableVisitor.java:27)\n\
    \tat Compiler.AST.ProgramNode.accept(ProgramNode.java:22)\n\tat Compiler.Main.main(Main.java:39)\n\
    [3:8][SemanticException] undeclared symbol : c\n", stdout: '', verdict: Accepted}
